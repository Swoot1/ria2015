##ECMAScript6
Since I had to read up on the new ECMAScript6 functionality I thought I might as well post my findings here for someone else to read as well.

###What is ECMAScript?
>[ECMAScript is a standard. JavaScript and ActionScript are well-known implementations of the ECMAScript standard.]("http://stackoverflow.com/a/4269168/1075304")

###What's new in ECMAScript 6?

####Arrow functions
Makes it possible to write anonymous function with less code and makes *this* lexical.
    
Compare the old way of writing anonymous functions
    
    function(){ statements }
    function(){ expression }

With the new ES6 way of doing it
    
    () => { statements }
    () => expression
    
it's shorter, right.

Compare the old way to reference this as a variable;

    function Person(){
        var self = this; // Set self to this so that we can reference the person object from..
        self.age = 0;
        
        setInterval(function(){
            self.age++; // .. here
        }, 1000);
    }
    
With the new way where this is still the same *this* as outside the function.

    function Person(){
        this.age = 0;
        
        setInterval(()=>{
            this.age++; // HEY! We're using this and are refering to the person without storing it in a variable.
        });
        
    }
    
[More on arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions)

####Rest params
When you have a function with a dynamic number of parameters just put it as the last argument and put three dots in front of the name.

Like this

    function(a, b, ...args) {
        // Now the args parameter is an array that contains all arguments inserted after the b parameter
    }

Say we have a sandwich function that we want to make sandwiches but we don't know how many toppings the user is going to insert. This is a good time for using the rest parameter

    makeSandwich(...toppings){
        // toppings is now an array that contains all the toppings inserted into the function
    }
    
We can call the function with

    makeSandwich('cheese');
    makeSandwich('turkey', 'mayo');
    makeSandwich('bacon', 'bacon', 'bacon');

and the function couldn't care less about how many arguments you call it with.

More on rest params [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).

####Templates
Hallelujah, multiline strings. I know you're not supposed to write HTML in your .js files but if you've ever done it anyway you know that you have to concatenate every new line, unless you don't want to write everything on the same line that is. With ES6 templates you don't have to instead of
    
    '<div>' + 
        'This is my div that shouldn't be in the HTML' +
    '</div>'

you can now skip the concatenation with the addition sign and simply write

    `<div> 
        This is my div that shouldn't be in the HTML
    </div>`
    
Pay attention to the back-ticks in the beginning and in the end of the string. Without them it won't work.

ES6 template also lets you write expressions directly in you strings.

Compare

    'My name is Elin and I\'m' + (currentYear - birthYear) + ' years old.' 
    
With the new crispy

    `My name is Elin and I'm ${currentYear - birthYear} years old.`
    
Remember those back-ticks!
    
You can also write functions for your strings if you'd like but I'm unsure how often you'd need it. Read more about it [here](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/template_strings).

####Object short notation
Quite a few changes. To name a few of them

Short hand property names
    
    var a = 'myVarA', b = '30', c = {};
    var myObject = {a: a, b: b, c: c};
    
That was the old way where you had to write out the property name. This is the new way:
    
    var a = 'myVarA', b = '30', c = {};
    var myObject = {a, b, c};

Where the property names are the variable names automatically.

There's also this new thing with calculated property names
    
    var myObject = {
        [someVariableIWantToUseAsName] : 'hello',
        ['myVar' + i] : 'you'
    }

There's some more stuff i.e. short hand method names and you can read more about it [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer)

####Classes
JavaScript goes object oriented and adds classes and common class stuff such as constructor, static functions and inheritance.

View the syntax [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)

